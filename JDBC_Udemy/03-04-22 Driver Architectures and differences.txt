Thick and Thin Driver: 
    - The driver which needs an extra component to communicate with the Db is called     thick Driver. Examples of thick drivers are Type-1, 2 and Type-3 Drivers
    - Thin Driver is the one which does NOT need any extra component to communicate       with the DB. Example of thin Driver is Type-4 Driver
    
Tier2 vs Tier3 Architecture:
    In simplest terms, Here Tier means number of machines involved(for all the components) for complete call from Java Appliation to DB. 
    
    - Type-1 Driver is Tier2 Driver as Java Appliation & Type-1 Driver and ODBC Driver   are all based on client machine where as DB is on different machine. Hence         Tier2 Driver
    - Type-2 Driver is Tier2 Driver for the same reasons as above
    - Type-3 Driver is Tier3 Driver as Java Application and Type-3 Driver is based on     client machine, Middleware software is installed on different machine and Db is     based on a third machine. Hence Tier3 Driver
    - Type-4 Driver is as Tier2 Driver in the same way as Type-1 and Type-2 Drivers
    

Steps to Develop JDBC Application:
    - 1. Load and register Driver Class:
            - add .jar file for the driver in the class path
            - Class.ForName('Driver class name');
            - this step is not explicitly required after Java 1.6, its optional
    - 2. Establish connection between Java Application and Db:
            - Connection con = DriverManager.getConnection(jdbc url, username, pwd);
            - Breakdown of JDBC url = main-protcol: sub-protocol: sub-name
                                    =jdbc(always): driver_protocol: connection_details
            for Type-1 driver JDBC url = ("jdbc:odbc:demodsn", scott, tiger); where 'scott' is username for Oracle Db and 'tiger' is pwd for Oracle Db
                - DSN stands for data source name, it provides the Db information to        ODBC driver in Type-1 Drivers.
                    - DSN driver is not required in any other types of drivers
                    - There are 3 Types of Drivers
                        1. user DSN
                        2. System DSN
                        3. File DSN
                        
    - 3. Creation of Statement Object: statement object is used to send our querry to       Db and get the results back from the Db
    
            - Statement st = con.createStatement();
            
            
    - 4. Prepare, send and execute SQL querry: 
            - There are two types of querries with reference to JDBC    
                1. select querries (these return data i-e result set)
                2. non-select querries i-e insert|delete|update (these return a number      i-e number of rows effected)
        
            - In JDBC, there are 3 methods available to execute querries
                1. executeQuerry() = used to execute SELECT querries and it will            return a 'result set'
                2. executeUpdate() = used to execute non-SELECT querries and it will        return a number
                3. execute() = used for both SELECT and non-SELECT querries and it          returns a boolean. If execute() returns a 'true' means querry is      SELECT querry and 'false' means non-SELECT querry
                
            - We use the above querries on the statement Object
            
            
    - 5. Process results from Result Set
            - while (rs.next())
            - After that use the getter methods on result-set
                rs.getString({index-No or column-Name})
            - Index of first column in JDBC always starts with '1'
            
            
    -6. Close the connection
            - Close the associated objects before closing the connection
                1. close the result set
                2. close the statement object
                3. close the connection
            - Statement Object is always associated with Connection Object. Multiple statement objects can be created with a single connection
            - * Result set is associated with Statement Object. Only one Result Set can be created with ONE statement Object
            - Just closing the connection object will close all the associated objects. Statement Objects and Result object dont need to be explicitly closed
            - Another way to use Connection is by using try with resources block, it automatically closes the resources at the end of block
    
    
    
    
    
    
    
            
            
            
            
            
            
            
            
            
            
            